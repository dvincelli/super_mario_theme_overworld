#include <avr/pgmspace.h>

#include "pitches.h"

#define NOTE_REST 0
#define NOTE_END -1
#define NOTE_REPEAT -2

#define BPM 92

// note durations: 4 = quarter note, 8 = eighth note, etc.:
typedef struct Note {
 uint8_t duration;
 int16_t pitch;
} note_t;

// PROGMEM to save RAM and to fit in RAM on Arduino 168
PROGMEM const note_t score[][2]  = {
	{8, NOTE_E5},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_E4},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_B4},
	{8, NOTE_REST},
	{8, NOTE_AS4},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_E5},
	{8, NOTE_G5},
	{8, NOTE_A5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_B4},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_E4},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_B4},
	{8, NOTE_REST},
	{8, NOTE_AS4},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_E5},
	{8, NOTE_G5},
	{8, NOTE_A5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_B4},
	{4, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_G5},
	{8, NOTE_FS5},
	{8, NOTE_F5},
	{8, NOTE_DS5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_GS4},
	{8, NOTE_A4},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{4, NOTE_REST},
	{8, NOTE_G5},
	{8, NOTE_FS5},
	{8, NOTE_F5},
	{8, NOTE_DS5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C6},
	{8, NOTE_REST},
	{8, NOTE_C6},
	{8, NOTE_C6},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_G5},
	{8, NOTE_FS5},
	{8, NOTE_F5},
	{8, NOTE_DS5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_GS4},
	{8, NOTE_A4},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{4, NOTE_REST},
	{8, NOTE_DS5},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_D5},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_G4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_E5},
	{4, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_G4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_E4},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_B4},
	{8, NOTE_REST},
	{8, NOTE_AS4},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_E5},
	{8, NOTE_G5},
	{8, NOTE_A5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_B4},
	{4, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_E4},
	{8, NOTE_REST},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_B4},
	{8, NOTE_REST},
	{8, NOTE_AS4},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{8, NOTE_E5},
	{8, NOTE_G5},
	{8, NOTE_A5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_G5},
	{8, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_REST},
	{8, NOTE_C5},
	{8, NOTE_D5},
	{8, NOTE_B4},
	{4, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_GS4},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_F5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{6, NOTE_B4},
	{6, NOTE_A5},
	{6, NOTE_A5},
	{6, NOTE_A5},
	{6, NOTE_G5},
	{6, NOTE_F5},
	{8, NOTE_E5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_G4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_E5},
	{8, NOTE_C5},
	{8, NOTE_REST},
	{8, NOTE_G4},
	{4, NOTE_REST},
	{8, NOTE_GS4},
	{8, NOTE_REST},
	{8, NOTE_A4},
	{8, NOTE_F5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{8, NOTE_A4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{8, NOTE_B4},
	{8, NOTE_F5},
	{8, NOTE_REST},
	{8, NOTE_F5},
	{6, NOTE_F5},
	{6, NOTE_E5},
	{6, NOTE_D5},
	{8, NOTE_C5},
	{8, NOTE_E4},
	{8, NOTE_REST},
	{8, NOTE_E4},
	{8, NOTE_C4},
	{8, NOTE_REST},
	{4, NOTE_REST},
	{0, NOTE_END}
};

void setup() {
  playTune();
}

void playTune()
{
  note_t currentNote;

  // I am not a musician!
  // I don't fully understand why I had to * 4.0 / 3.0 to get it to sound right.
  float barDuration = (60000.0/BPM) * 4.0/3.0;
  
  for (int thisNote = 0;; thisNote++) {
    memcpy_PF(&currentNote, (uint_farptr_t) score[thisNote], sizeof(note_t));
    int noteTone = currentNote.pitch;
    switch(noteTone) {
      case NOTE_END:
        return;
      case NOTE_REPEAT:
        thisNote = -1;  // for will iterate to 0
        continue;
      default:
        float noteDuration = barDuration/currentNote.duration;
        tone(8, noteTone, noteDuration);
        float pauseBetweenNotes = noteDuration * 1.2;
        delay(pauseBetweenNotes);
        noTone(8);
      }
    } 
}

void loop() {
}

